[{"/home/ec2-user/environment/kanban_reactjs_itss/src/index.js":"1","/home/ec2-user/environment/kanban_reactjs_itss/src/reportWebVitals.js":"2","/home/ec2-user/environment/kanban_reactjs_itss/src/App.js":"3","/home/ec2-user/environment/kanban_reactjs_itss/src/lib/util.js":"4","/home/ec2-user/environment/kanban_reactjs_itss/src/components/Todo.js":"5","/home/ec2-user/environment/kanban_reactjs_itss/src/components/TodoItem.js":"6","/home/ec2-user/environment/kanban_reactjs_itss/src/components/TodoInput.js":"7","/home/ec2-user/environment/kanban_reactjs_itss/src/components/TodoFilter.js":"8","/home/ec2-user/environment/kanban_reactjs_itss/src/hooks/storage.js":"9","/home/ec2-user/environment/kanban_reactjs_itss/src/components/Arrow.js":"10"},{"size":500,"mtime":1618241722728,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1618241722728,"results":"13","hashOfConfig":"12"},{"size":3395,"mtime":1618241722728,"results":"14","hashOfConfig":"12"},{"size":68,"mtime":1618241722728,"results":"15","hashOfConfig":"12"},{"size":4363,"mtime":1618241722728,"results":"16","hashOfConfig":"12"},{"size":4519,"mtime":1618242231272,"results":"17","hashOfConfig":"12"},{"size":813,"mtime":1618241722728,"results":"18","hashOfConfig":"12"},{"size":701,"mtime":1618241722728,"results":"19","hashOfConfig":"12"},{"size":655,"mtime":1618241722728,"results":"20","hashOfConfig":"12"},{"size":1328,"mtime":1618242136868,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"ihwqbc",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ec2-user/environment/kanban_reactjs_itss/src/index.js",[],["47","48"],"/home/ec2-user/environment/kanban_reactjs_itss/src/reportWebVitals.js",[],"/home/ec2-user/environment/kanban_reactjs_itss/src/App.js",["49"],"import React, { useState, useEffect } from 'react';\nimport { getKey } from \"./lib/util\";\n\n\n/* スタイルシート */\nimport './styles/main.css';\n\n/* コンポーネント */\nimport Todo from './components/Todo';\n\nfunction App() {\n\n  const [listItems, setListItems] = useState([\n    /* テストコード 開始 */\n    { key: getKey(), text: 'day la mot memo', done: true, pending: false, color: '' },\n    { key: getKey(), text: 'day cung la mot memo', done: true, pending: false, color: '' },\n    { key: getKey(), text: 'lam bai tap reactjs', done: true, pending: false, color: '' },\n    { key: getKey(), text: 'day la mot project', done: false, pending: false, color: '' },\n    { key: getKey(), text: 'xong truoc buoi chieu thu 2', done: false, pending: false, color: '' },\n    { key: getKey(), text: 'bat dau lam thoi', done: false, pending: true, color: '' },\n    { key: getKey(), text: 'xong task 1', done: false, pending: true, color: '' },\n    { key: getKey(), text: 'xin chao cac ban', done: false, pending: true, color: '' },\n    { key: getKey(), text: 'xin chao  ban', done: false, pending: true, color: '' }\n    /* テストコード 終了 */\n  ]);\n\n  const [pendingItems, setPendingItems] = useState(\n    listItems.filter((item) => {\n      return item.done === false && item.pending === true\n    })\n  )\n\n  const [doingItems, setDoingItems] = useState(\n    listItems.filter((item) => {\n      return item.done === false && item.pending === false\n    })\n  )\n\n  const [doneItems, setDoneItems] = useState(\n    listItems.filter((item) => {\n      return item.done === true && item.pending === false\n    })\n  )\n\n\n\n\n  const handleClickArrow = (item) => {\n    const newListItems = [];\n    listItems.forEach((e) => {\n      if (e.key === item.key) {\n        newListItems.push(item);\n      } else {\n        newListItems.push(e);\n      }\n    })\n\n    // console.log(newListItems);\n\n    setListItems(newListItems);\n    setDoingItems(newListItems.filter(item => {\n      return item.pending === false && item.done === false\n    }))\n\n    setPendingItems(newListItems.filter(item => {\n      return item.pending === true && item.done === false\n    }))\n\n    setDoneItems(newListItems.filter(item => {\n      return item.pending === false && item.done === true\n    }))\n  }\n\n  const AppHandleSetColor = (item) => {\n    const newListItems = [];\n    listItems.forEach(e => {\n      if (e.key === item.key) {\n        newListItems.push(item);\n      }\n      else {\n        newListItems.push(e);\n      }\n    })\n\n    setListItems(newListItems);\n    console.log(newListItems);\n    setDoingItems(newListItems.filter(item => {\n      return item.pending === false && item.done === false\n    }))\n\n    setPendingItems(newListItems.filter(item => {\n      return item.pending === true && item.done === false\n    }))\n\n    setDoneItems(newListItems.filter(item => {\n      return item.pending === false && item.done === true\n    }))\n  }\n\n\n  return (\n    <div className=\"container is-fluid\">\n      <Todo listItems={pendingItems} title=\"To Do\" handleClickArrow={handleClickArrow} AppHandleSetColor={AppHandleSetColor} />\n      <Todo listItems={doingItems} title=\"In Progress\" handleClickArrow={handleClickArrow} AppHandleSetColor={AppHandleSetColor}></Todo>\n      <Todo listItems={doneItems} title=\"Done\" handleClickArrow={handleClickArrow} AppHandleSetColor={AppHandleSetColor}></Todo>\n    </div>\n  );\n}\n\nexport default App;\n","/home/ec2-user/environment/kanban_reactjs_itss/src/lib/util.js",[],"/home/ec2-user/environment/kanban_reactjs_itss/src/components/Todo.js",["50","51"],"import React, { useState, useEffect } from 'react';\n\n/* \n  【Todoのデータ構成】\n ・key：Todoを特定するID（String）\n ・text：Todoの内容（String）\n ・done：完了状態（Boolean true:完了済み,, false:未完了）\n*/\n\n/* コンポーネント */\nimport TodoItem from './TodoItem';\nimport TodoInput from './TodoInput';\nimport TodoFilter from './TodoFilter';\n\n/* カスタムフック */\nimport useStorage from '../hooks/storage';\n\n/* ライブラリ */\nimport { getKey } from \"../lib/util\";\n\nfunction Todo(props) {\n  const { listItems, title, handleClickArrow,AppHandleSetColor } = props\n\n  const [items, setItems] = React.useState(listItems);\n\n  const [showAddTaskForm, setShowAddTaskForm] = useState(true);\n\n  useEffect(() => {\n    setItems(listItems)\n  }, [listItems])\n  //bat event click checkbox\n  function handleCheckboxClick(item) {\n    const newItems = [];\n    items.forEach(e => {\n      if (e.key === item.key) {\n        newItems.push({ ...e, done: !e.done })\n      } else {\n        newItems.push(e)\n      }\n    })\n    setItems(newItems);\n  }\n\n  //tao item moi \n  function createNewItem(title, value) {\n    if (title === 'To Do') {\n      const newItem = {\n        key: getKey(),\n        text: value,\n        done: false,\n        pending: true\n      }\n      return newItem\n    }\n    if (title === 'In Progress') {\n      const newItem = {\n        key: getKey(),\n        text: value,\n        done: false,\n        pending: false\n      }\n      return newItem\n    }\n    if (title === 'Done') {\n      const newItem = {\n        key: getKey(),\n        text: value,\n        done: true,\n        pending: false\n      }\n      return newItem\n    }\n  }\n\n  function handleSubmitForm(formValues) {\n    const newItems = [];\n    const newItem = createNewItem(title, formValues.title);\n    items.forEach((item) => {\n      newItems.push(item)\n    })\n    newItems.push(newItem);\n    setItems(newItems);\n\n    setShowAddTaskForm(true);\n  }\n\n  function handleEditForm(item) {\n    const newItems = [];\n    items.forEach((e) => {\n      if (e.key === item.key) {\n        newItems.push(item);\n      } else {\n        newItems.push(e);\n      }\n    })\n    setItems(newItems);\n  }\n\n  function handleDeleteForm(item) {\n    const newItems = items.filter(x => x.key !== item.key);\n    setItems(newItems);\n  }\n\n  const handleClickAddTask = () => {\n    setShowAddTaskForm(!showAddTaskForm);\n  }\n\n  const renderAddTaskForm = () => {\n    if (showAddTaskForm === true) {\n      return (\n        <div className=\"panel-block add-task-btn\" onClick={handleClickAddTask}>\n          <div className=\"add-btn-group\">\n            <i class=\"fas fa-plus item-add-1\"></i>\n            <p class=\"item-add-2\">Add a task</p>\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"panel-block\">\n          <TodoInput onSubmitt={handleSubmitForm}></TodoInput>\n          <div className=\"cancel-add-task-in-form-btn\" onClick={handleClickAddTask}>Cancel</div>\n        </div>\n      )\n    }\n  }\n\n  const handleLeftArrow = (item) => {\n    if (item.pending === false && item.done === true) {\n      const newItem = { ...item, done: false }\n      handleClickArrow(newItem);\n    }\n    if (item.pending === false && item.done === false) {\n      const newItem = { ...item, pending: true }\n      handleClickArrow(newItem);\n    }\n  }\n\n  const handleRightArrow = (item) => {\n    if (item.pending === true && item.done === false) {\n      const newItem = { ...item, pending: false }\n      handleClickArrow(newItem);\n    }\n    if (item.pending === false && item.done === false) {\n      const newItem = { ...item, done: true }\n      handleClickArrow(newItem);\n    }\n\n  }\n\n  const handleSetColor=(item)=>{\n    AppHandleSetColor(item);\n  }\n\n  return (\n    <div className=\"panel\">\n      <div className=\"panel-heading\">\n        {title}\n      </div>\n      {items.map(item => (\n        <TodoItem item={item}\n          handleCheckboxClick={handleCheckboxClick}\n          handleEditForm={handleEditForm}\n          handleDeleteForm={handleDeleteForm}\n          handleLeftArrow={handleLeftArrow}\n          handleRightArrow={handleRightArrow}\n          handleSetColor={handleSetColor}\n        >\n        </TodoItem>\n      ))}\n      {renderAddTaskForm()}\n      <div className=\"panel-block count-item\">\n        {items.length} items\n      </div>\n    </div>\n  );\n}\n\nexport default Todo;","/home/ec2-user/environment/kanban_reactjs_itss/src/components/TodoItem.js",["52"],"import React, { useState } from 'react';\nimport Arrow from './Arrow';\n/* \n  【TodoItemコンポーネント】\n ・Todoアイテムを表示する\n ・チェックボックスにチェックが入っているか管理する\n ・チェックボックスにチェックが入っているかアイテムをグレーアウトする\n*/\nfunction TodoItem(props) {\n  const { item, handleCheckboxClick, handleEditForm, handleDeleteForm , handleLeftArrow, handleRightArrow, handleSetColor} = props;\n\n  // state lưu trạng thái đóng mở bảng màu \n  const [openPalete, setOpenPalete] = useState(false);\n\n  // state lưu trạng thái đóng mở edit form\n  const [openEdit, setOpenEdit] = useState(false);\n\n  //state lưu giá trị nhập vào form chỉnh sửa\n  const [editFormValue, setEditFormValue] = useState(item.text);\n\n  //state lưu trạng thái màu của thẻ todo hiện tại\n  const [curColor, setCurColor] = useState(item.color);\n\n\n  const handleClickPalete = () => {\n    const status = !openPalete;\n    setOpenPalete(status);\n  }\n\n  const handleClickPaleteColor = (color) => {\n    //setbackground \n    setCurColor(color.background);\n    const newItem= {...item, color:color.background}\n    handleSetColor(newItem);\n\n\n    //close palete\n    const status = !openPalete\n    setOpenPalete(status);\n  }\n\n  const renderPaleteForm = () => {\n    if (openPalete) {\n      return (<div className=\"panel-optional\">\n        <div className=\"green-box\" style={{ background: '#61BD4F' }} onClick={() => handleClickPaleteColor({ background: '#61BD4F' })}></div>\n        <div className=\"yellow-box\" style={{ background: '#F2D600' }} onClick={() => handleClickPaleteColor({ background: '#F2D600' })}></div>\n        <div className=\"orange-box\" style={{ background: '#FF9F1A' }} onClick={() => handleClickPaleteColor({ background: '#FF9F1A' })}></div>\n        <div className=\"red-box\" style={{ background: '#EB5A46' }} onClick={() => handleClickPaleteColor({ background: '#EB5A46' })}></div>\n        <div className=\"violet-box\" style={{ background: '#C377E0' }} onClick={() => handleClickPaleteColor({ background: '#C377E0' })}></div>\n        <div className=\"white-box\" style={{ background: '#ffffff' }} onClick={() => handleClickPaleteColor({ background: '#ffffff' })}></div>\n        <div className=\"blue-box\" style={{ background: '#0079BF' }} onClick={() => handleClickPaleteColor({ background: '#0079BF' })}></div>\n      </div>)\n    }\n    else return\n  }\n\n  const handleClickEdit = () => {\n    const status = !openEdit;\n    setOpenEdit(status);\n  }\n\n  \n\n  const renderEditForm = () => {\n    if (openEdit === false) {\n      return (\n        // <span className={item.done ? 'has-text-grey-light' : ''}>\n        <div>\n          <span>\n            {item.text}\n          </span>\n        </div>\n      )\n    } else {\n      return (\n        <input type=\"text\" name='title' value={editFormValue} onChange={handleValueChange} onKeyDown={handlePressEnter}></input>\n      )\n    }\n  }\n\n  const handleValueChange = (e) => {\n    setEditFormValue(e.target.value);\n  }\n\n  const handlePressEnter = (event) => {\n    if (event.key === 'Enter') {\n      // lấy được giá trị mới ở input, giờ phải lấy được id của todo\n      const newItem = { ...item, text: editFormValue };\n      // da lay duoc item moi-> gui len Todo de changeState\n      handleEditForm(newItem)\n      //cap nhat state de dong form\n      setOpenEdit(false);\n    }\n  }\n\n  const handleClickDelete = () => {\n    handleDeleteForm(item);\n  }\n \n  \n\n  return (\n    <div className=\"panel-block\" style={{ background: curColor }}>\n      <div className=\"panel-content\">\n        <div className=\"todo-content item1\">\n          {/* <input type=\"checkbox\" onChange={() => handleCheckboxClick(item)} checked={item.done} /> */}\n\n          {renderEditForm()}\n        </div>\n        <Arrow\n          item = {item}\n          leftArrow = {handleLeftArrow}\n          rightArrow = {handleRightArrow}\n        />\n        <div className=\"todo-palete item2\" onClick={handleClickPalete}>\n          <i className=\"fas fa-palette\"></i>\n        </div>\n        <div className=\"todo-edit item3\" onClick={handleClickEdit}>\n          <i className=\"fas fa-pencil-alt\"></i>\n        </div>\n        <div className=\"todo-delete item4\" onClick={handleClickDelete}>\n          <i className=\"far fa-trash-alt\"></i>\n        </div>\n      </div>\n      {/* ket thuc noi dung cua mot todo */}\n      {renderPaleteForm()}\n      {/* cac action voi todo */}\n\n    </div>\n  )\n}\n\nexport default TodoItem","/home/ec2-user/environment/kanban_reactjs_itss/src/components/TodoInput.js",[],"/home/ec2-user/environment/kanban_reactjs_itss/src/components/TodoFilter.js",[],"/home/ec2-user/environment/kanban_reactjs_itss/src/hooks/storage.js",["53","54"],"import { useState, useEffect } from 'react';\n\n/* \n  【Storageフック】\n　・TodoをlocalStorageを使って保存する\n　・以下機能をサポートする\n　  - localstrageに保存されているすべてのTodoの読み出し機能\n　  - Todoをlocalstrageに保存する\n　  - localstrageにあるTodoを削除する\n*/\n\nconst STORAGE_KEY = 'itss-todo';\n\nfunction useStorage() {\n  const [items, setItems] = useState([]);\n　\n　/* 副作用を使う */\n  useEffect(() => {\n    \n  }, []);\n\n  const putItems = items => {\n    \n  };\n\n  const clearItems = () => {\n    \n  };\n\n  return [items, putItems, clearItems];\n}\n\nexport default useStorage;","/home/ec2-user/environment/kanban_reactjs_itss/src/components/Arrow.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":27,"nodeType":"61","messageId":"62","endLine":1,"endColumn":36},{"ruleId":"59","severity":1,"message":"63","line":13,"column":8,"nodeType":"61","messageId":"62","endLine":13,"endColumn":18},{"ruleId":"59","severity":1,"message":"64","line":16,"column":8,"nodeType":"61","messageId":"62","endLine":16,"endColumn":18},{"ruleId":"59","severity":1,"message":"65","line":10,"column":17,"nodeType":"61","messageId":"62","endLine":10,"endColumn":36},{"ruleId":"59","severity":1,"message":"66","line":12,"column":7,"nodeType":"61","messageId":"62","endLine":12,"endColumn":18},{"ruleId":"59","severity":1,"message":"67","line":15,"column":17,"nodeType":"61","messageId":"62","endLine":15,"endColumn":25},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'TodoFilter' is defined but never used.","'useStorage' is defined but never used.","'handleCheckboxClick' is assigned a value but never used.","'STORAGE_KEY' is assigned a value but never used.","'setItems' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]